/******************************************************************************
 * This file was generated by langium-cli 0.5.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable @typescript-eslint/array-type */
/* eslint-disable @typescript-eslint/no-empty-interface */
import { AstNode, AstReflection, ReferenceInfo, isAstNode, TypeMetaData } from 'langium';

export type Actuator = Location;

export const Actuator = 'Actuator';

export function isActuator(item: unknown): item is Actuator {
    return reflection.isInstance(item, Actuator);
}

export type Brick = Actuator | Sensor;

export const Brick = 'Brick';

export function isBrick(item: unknown): item is Brick {
    return reflection.isInstance(item, Brick);
}

export type Sensor = Location;

export const Sensor = 'Sensor';

export function isSensor(item: unknown): item is Sensor {
    return reflection.isInstance(item, Sensor);
}

export interface Action extends AstNode {
    readonly $container: State;
    receiver: string
    value: string
}

export const Action = 'Action';

export function isAction(item: unknown): item is Action {
    return reflection.isInstance(item, Action);
}

export interface Declaration extends Model {
    name: string
}

export const Declaration = 'Declaration';

export function isDeclaration(item: unknown): item is Declaration {
    return reflection.isInstance(item, Declaration);
}

export interface Location extends AstNode {
    readonly $container: Model;
    id: string
    port: string
}

export const Location = 'Location';

export function isLocation(item: unknown): item is Location {
    return reflection.isInstance(item, Location);
}

export interface Model extends AstNode {
    bricks: Array<Brick>
    states: Array<State>
}

export const Model = 'Model';

export function isModel(item: unknown): item is Model {
    return reflection.isInstance(item, Model);
}

export interface State extends AstNode {
    readonly $container: Model;
    actions: Array<Action>
    name: string
}

export const State = 'State';

export function isState(item: unknown): item is State {
    return reflection.isInstance(item, State);
}

export interface Transition extends AstNode {
    next: string
    trigger: string
    value: string
}

export const Transition = 'Transition';

export function isTransition(item: unknown): item is Transition {
    return reflection.isInstance(item, Transition);
}

export type ArduinoMlAstType = 'Action' | 'Actuator' | 'Brick' | 'Declaration' | 'Location' | 'Model' | 'Sensor' | 'State' | 'Transition';

export class ArduinoMlAstReflection implements AstReflection {

    getAllTypes(): string[] {
        return ['Action', 'Actuator', 'Brick', 'Declaration', 'Location', 'Model', 'Sensor', 'State', 'Transition'];
    }

    isInstance(node: unknown, type: string): boolean {
        return isAstNode(node) && this.isSubtype(node.$type, type);
    }

    isSubtype(subtype: string, supertype: string): boolean {
        if (subtype === supertype) {
            return true;
        }
        switch (subtype) {
            case Declaration: {
                return this.isSubtype(Model, supertype);
            }
            case Location: {
                return this.isSubtype(Sensor, supertype) || this.isSubtype(Actuator, supertype);
            }
            case Actuator:
            case Sensor: {
                return this.isSubtype(Brick, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case 'Declaration': {
                return {
                    name: 'Declaration',
                    mandatory: [
                        { name: 'bricks', type: 'array' },
                        { name: 'states', type: 'array' }
                    ]
                };
            }
            case 'Model': {
                return {
                    name: 'Model',
                    mandatory: [
                        { name: 'bricks', type: 'array' },
                        { name: 'states', type: 'array' }
                    ]
                };
            }
            case 'State': {
                return {
                    name: 'State',
                    mandatory: [
                        { name: 'actions', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}

export const reflection = new ArduinoMlAstReflection();
